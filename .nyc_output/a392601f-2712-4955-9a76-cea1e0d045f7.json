{"/home/usuario/ejercicios-20-03/src/ejercicio-1/solver.ts":{"path":"/home/usuario/ejercicios-20-03/src/ejercicio-1/solver.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":24}},"2":{"start":{"line":14,"column":8},"end":{"line":14,"column":25}},"3":{"start":{"line":15,"column":8},"end":{"line":15,"column":33}},"4":{"start":{"line":22,"column":8},"end":{"line":22,"column":33}},"5":{"start":{"line":23,"column":8},"end":{"line":23,"column":29}},"6":{"start":{"line":29,"column":8},"end":{"line":29,"column":41}},"7":{"start":{"line":30,"column":8},"end":{"line":30,"column":25}},"8":{"start":{"line":36,"column":8},"end":{"line":36,"column":25}},"9":{"start":{"line":39,"column":8},"end":{"line":39,"column":26}},"10":{"start":{"line":42,"column":0},"end":{"line":42,"column":24}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":13,"column":4},"end":{"line":13,"column":5}},"loc":{"start":{"line":13,"column":32},"end":{"line":16,"column":5}},"line":13},"1":{"name":"(anonymous_1)","decl":{"start":{"line":21,"column":4},"end":{"line":21,"column":5}},"loc":{"start":{"line":21,"column":26},"end":{"line":24,"column":5}},"line":21},"2":{"name":"(anonymous_2)","decl":{"start":{"line":28,"column":4},"end":{"line":28,"column":5}},"loc":{"start":{"line":28,"column":12},"end":{"line":31,"column":5}},"line":28},"3":{"name":"(anonymous_3)","decl":{"start":{"line":35,"column":4},"end":{"line":35,"column":5}},"loc":{"start":{"line":35,"column":15},"end":{"line":37,"column":5}},"line":35},"4":{"name":"(anonymous_4)","decl":{"start":{"line":38,"column":4},"end":{"line":38,"column":5}},"loc":{"start":{"line":38,"column":19},"end":{"line":40,"column":5}},"line":38}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":2,"5":2,"6":2,"7":2,"8":4,"9":1,"10":1},"f":{"0":1,"1":2,"2":2,"3":4,"4":1},"b":{},"inputSourceMap":{"version":3,"file":"/home/usuario/ejercicios-20-03/src/ejercicio-1/solver.ts","sources":["/home/usuario/ejercicios-20-03/src/ejercicio-1/solver.ts"],"names":[],"mappings":";;;AAEA;;GAEG;AACH,MAAa,MAAM;IAEjB;;;;OAIG;IACH,YAAoB,IAAc,EAAU,QAAkB;QAA1C,SAAI,GAAJ,IAAI,CAAU;QAAU,aAAQ,GAAR,QAAQ,CAAU;IAC9D,CAAC;IAED;;;OAGG;IACH,WAAW,CAAC,QAAkB;QAC5B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED;;OAEG;IACH,KAAK;QACH,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjC,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IAED;;OAEG;IACH,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,IAAI,CAAC;IACnB,CAAC;IAED,OAAO,CAAC,KAAe;QACrB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;IACpB,CAAC;CACF;AArCD,wBAqCC","sourcesContent":["import { Strategy } from \"./strategy\";\n\n/**\n * Clase que simboliza un problema a resolver\n */\nexport class Solver {\n\n  /**\n   * Constructor de la clase\n   * @param data array que se quiere ordenar\n   * @param strategy algoritmo que se quiere emplear\n   */\n  constructor(private data: number[], private strategy: Strategy) {\n  }\n\n  /**\n   * Método setter que establece el algoritmo que se quiere implementar\n   * @param strategy algoritmo que se quiere emplear\n   */\n  setStrategy(strategy: Strategy): Strategy {\n    this.strategy = strategy;\n    return this.strategy;\n  }\n\n  /**\n   * Método que ejecuta el algoritmo de ordenación\n   */\n  logic(): number[] {\n    this.strategy.execute(this.data);\n    return this.data;\n  }\n\n  /**\n   * Método getter que devuelve el array\n   */\n  get Data() {\n    return this.data;\n  }\n\n  setData(array: number[]) {\n    this.data = array;\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"af15219a936b3938d8fa247bcc1570828aa8ce61","contentHash":"41636092af279dfcaf257396af7600c15fe4c337a3570279ead55dfb12c79ccf"},"/home/usuario/ejercicios-20-03/src/ejercicio-1/bubblesort.ts":{"path":"/home/usuario/ejercicios-20-03/src/ejercicio-1/bubblesort.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":28}},"2":{"start":{"line":14,"column":8},"end":{"line":20,"column":9}},"3":{"start":{"line":14,"column":21},"end":{"line":14,"column":22}},"4":{"start":{"line":15,"column":12},"end":{"line":19,"column":13}},"5":{"start":{"line":15,"column":25},"end":{"line":15,"column":26}},"6":{"start":{"line":16,"column":16},"end":{"line":18,"column":17}},"7":{"start":{"line":17,"column":20},"end":{"line":17,"column":68}},"8":{"start":{"line":21,"column":8},"end":{"line":21,"column":20}},"9":{"start":{"line":24,"column":0},"end":{"line":24,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":13,"column":4},"end":{"line":13,"column":5}},"loc":{"start":{"line":13,"column":18},"end":{"line":22,"column":5}},"line":13}},"branchMap":{"0":{"loc":{"start":{"line":16,"column":16},"end":{"line":18,"column":17}},"type":"if","locations":[{"start":{"line":16,"column":16},"end":{"line":18,"column":17}},{"start":{"line":16,"column":16},"end":{"line":18,"column":17}}],"line":16}},"s":{"0":1,"1":1,"2":1,"3":1,"4":9,"5":9,"6":81,"7":16,"8":1,"9":1},"f":{"0":1},"b":{"0":[16,65]},"inputSourceMap":{"version":3,"file":"/home/usuario/ejercicios-20-03/src/ejercicio-1/bubblesort.ts","sources":["/home/usuario/ejercicios-20-03/src/ejercicio-1/bubblesort.ts"],"names":[],"mappings":";;;AAGA;;GAEG;AACH,MAAa,UAAU;IAErB;;;;OAIG;IACH,OAAO,CAAC,IAAc;QACpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAClC,IAAI,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE;oBACvB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;iBACnD;aACJ;SACF;QACD,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAjBD,gCAiBC","sourcesContent":["import { Strategy } from './strategy';\n\n\n/**\n * Clase que implementa el algoritmo BubbleSort\n */\nexport class BubbleSort implements Strategy {\n\n  /**\n   * Método que ordena el array con el algoritmo BubbleSort\n   * @param data array que se quiere ordenar\n   * @returns array ordenado con el algoritmo BubbleSort\n   */\n  execute(data: number[]): number[] {\n    for (let i = 0; i < data.length; i++) {\n      for (let j = 0; j < data.length; j++) {\n          if (data[j] > data[j + 1]) {\n              [data[j], data[j + 1]] = [data[j + 1], data[j]];\n          }\n      }\n    }\n    return data;\n  }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"ce1fceef151b24c0fe18fcac6b25307f1bbb1978","contentHash":"52e6ca4efc035a5c79af28682adf440da05aa6ecd46e0f9fdd896be7cdfb316b"},"/home/usuario/ejercicios-20-03/src/ejercicio-1/mergesort.ts":{"path":"/home/usuario/ejercicios-20-03/src/ejercicio-1/mergesort.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":14,"column":8},"end":{"line":14,"column":36}},"3":{"start":{"line":22,"column":8},"end":{"line":24,"column":9}},"4":{"start":{"line":23,"column":12},"end":{"line":23,"column":25}},"5":{"start":{"line":25,"column":22},"end":{"line":25,"column":50}},"6":{"start":{"line":26,"column":21},"end":{"line":26,"column":42}},"7":{"start":{"line":27,"column":22},"end":{"line":27,"column":40}},"8":{"start":{"line":28,"column":8},"end":{"line":28,"column":71}},"9":{"start":{"line":37,"column":26},"end":{"line":37,"column":28}},"10":{"start":{"line":38,"column":16},"end":{"line":38,"column":17}},"11":{"start":{"line":39,"column":16},"end":{"line":39,"column":17}},"12":{"start":{"line":40,"column":8},"end":{"line":49,"column":9}},"13":{"start":{"line":41,"column":12},"end":{"line":48,"column":13}},"14":{"start":{"line":42,"column":16},"end":{"line":42,"column":40}},"15":{"start":{"line":43,"column":16},"end":{"line":43,"column":20}},"16":{"start":{"line":46,"column":16},"end":{"line":46,"column":41}},"17":{"start":{"line":47,"column":16},"end":{"line":47,"column":20}},"18":{"start":{"line":50,"column":8},"end":{"line":50,"column":70}},"19":{"start":{"line":53,"column":0},"end":{"line":53,"column":30}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":13,"column":4},"end":{"line":13,"column":5}},"loc":{"start":{"line":13,"column":18},"end":{"line":15,"column":5}},"line":13},"1":{"name":"(anonymous_1)","decl":{"start":{"line":21,"column":4},"end":{"line":21,"column":5}},"loc":{"start":{"line":21,"column":21},"end":{"line":29,"column":5}},"line":21},"2":{"name":"(anonymous_2)","decl":{"start":{"line":36,"column":4},"end":{"line":36,"column":5}},"loc":{"start":{"line":36,"column":23},"end":{"line":51,"column":5}},"line":36}},"branchMap":{"0":{"loc":{"start":{"line":22,"column":8},"end":{"line":24,"column":9}},"type":"if","locations":[{"start":{"line":22,"column":8},"end":{"line":24,"column":9}},{"start":{"line":22,"column":8},"end":{"line":24,"column":9}}],"line":22},"1":{"loc":{"start":{"line":40,"column":15},"end":{"line":40,"column":50}},"type":"binary-expr","locations":[{"start":{"line":40,"column":15},"end":{"line":40,"column":30}},{"start":{"line":40,"column":34},"end":{"line":40,"column":50}}],"line":40},"2":{"loc":{"start":{"line":41,"column":12},"end":{"line":48,"column":13}},"type":"if","locations":[{"start":{"line":41,"column":12},"end":{"line":48,"column":13}},{"start":{"line":41,"column":12},"end":{"line":48,"column":13}}],"line":41}},"s":{"0":1,"1":1,"2":1,"3":17,"4":9,"5":8,"6":8,"7":8,"8":8,"9":8,"10":8,"11":8,"12":8,"13":13,"14":13,"15":13,"16":0,"17":0,"18":8,"19":1},"f":{"0":1,"1":17,"2":8},"b":{"0":[9,8],"1":[21,13],"2":[13,0]},"inputSourceMap":{"version":3,"file":"/home/usuario/ejercicios-20-03/src/ejercicio-1/mergesort.ts","sources":["/home/usuario/ejercicios-20-03/src/ejercicio-1/mergesort.ts"],"names":[],"mappings":";;;AAGA;;GAEG;AACH,MAAa,SAAS;IAEpB;;;;OAIG;IACH,OAAO,CAAC,IAAc;QACpB,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;IAED;;;;OAIG;IACH,SAAS,CAAC,KAAe;QACvB,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;YACpB,OAAO,KAAK,CAAC;SACd;QACD,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC3C,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QACnC,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACjC,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IACjE,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,IAAa,EAAE,KAAc;QACjC,MAAM,SAAS,GAAa,EAAE,CAAC;QAC/B,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,OAAO,CAAC,GAAG,IAAI,CAAC,MAAM,IAAI,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE;YAC1C,IAAI,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,EAAE;gBACtB,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;gBACxB,CAAC,EAAE,CAAC;aACL;iBAAM;gBACL,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBACzB,CAAC,EAAE,CAAC;aACL;SACF;QACD,OAAO,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IAChE,CAAC;CACF;AA/CD,8BA+CC","sourcesContent":["import { Strategy } from './strategy';\n\n\n/**\n * Clase que implementa el algoritmo MergeSort\n */\nexport class MergeSort implements Strategy {\n\n  /**\n   * Método que ejecuta y ordena el array con el algoritmo MergeSort\n   * @param data array que se quiere ordenar\n   * @returns array ordenado con el algoritmo MergeSort\n   */\n  execute(data: number[]): number[] {\n    return this.mergeSort(data);\n  }\n\n  /**\n   * Método que ordena el array con el algoritmo MergeSort\n   * @param data array que se quiere ordenar\n   * @returns el array ordenado\n   */\n  mergeSort(array: number[]): number[] {\n    if (array.length < 2) {\n      return array;\n    }\n    const mitad = Math.floor(array.length / 2);\n    const left = array.slice(0, mitad);\n    const right = array.slice(mitad);\n    return this.merge(this.mergeSort(left), this.mergeSort(right));\n  }\n\n  /**\n   * Método que mezcla dos arrays ordenados\n   * @param left parte izquierda del array\n   * @param right parte derecha del array\n   * @returns array ordenado\n   */\n  merge(left:number[], right:number[]):number[]{\n    const resultado: number[] = [];\n    let i = 0;\n    let j = 0;\n    while (i < left.length && j < right.length) {\n      if (left[i] < right[j]) {\n        resultado.push(left[i]);\n        i++;\n      } else {\n        resultado.push(right[j]);\n        j++;\n      }\n    }\n    return resultado.concat(left.slice(i)).concat(right.slice(j));\n  }\n}\n\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b09d9c5c6752159bd51243ac70215157598112f8","contentHash":"beaaf3572ef12461da21da6ee2ffcda316c0e53ea0a9d1998ae9c1bbcb37a137"}}